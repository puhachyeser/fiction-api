openapi: 3.0.0
info:
  title: fiction-api
  version: 1.0.0
servers:
  - url: http://{{url}}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /fictions/{id}:
    get:
      tags:
        - Fictions
      summary: Get a fiction
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

    patch:
      tags:
        - Fictions
      summary: Update a fiction
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: LOTR 2. Best book ever made
                releaseYear: 1956
                type: book
                author: J.R.R. Tolkien
                pages: 220
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

    delete:
      tags:
        - Fictions
      summary: Delete a fiction
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /fictions/:
    get:
      tags:
        - Fictions
      summary: Get all fictions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

    post:
      tags:
        - Fictions
      summary: Create a fiction
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: game
                title: 'Lord of The Rings: the Game 2'
                description: LOTR
                releaseYear: '2007'
                timeToBeat: 46h
                studio: NoMan studio
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /fictions/type/{type}:
    get:
      tags:
        - Fictions
      summary: Get fictions by type
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          example: game
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: daniel@gmail.com
                password: Daniel12345
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Peter
                password: Peter12345
                email: peter@gmail.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}